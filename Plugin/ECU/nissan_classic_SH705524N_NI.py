from encoder import Encoder

class nissan_classic_SH705524N_NI(Encoder):

    def __init__(self):
        super().__init__()
        self.size_min = 524288
        self.size_max = 524288
    
    def check(self, buffer: bytearray) -> bool:
        if len(buffer) != self.size_min:
            return False
        return super().check(buffer)
    
    def encode(self, buffer: bytearray):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—É—Ñ–µ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–º–µ—Ä—É
        if not self.check(buffer):
            print(f"–û—à–∏–±–∫–∞: —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ {len(buffer)} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç {self.size_min} –±–∞–π—Ç–∞–º")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å wildcard-–±–∞–π—Ç–∞–º–∏ (None –æ–∑–Ω–∞—á–∞–µ—Ç –ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
        patterns = [
            # D8 0A 8A 78 (AA) - 55
            {
                'pattern': [0xD8, 0x0A, 0x8A, 0x78, None],
                'changes': [(4, 0x55)],
                'name': 'D8 0A 8A 78 (XX)',
                'description': 'D8 0A 8A 78 (AA) -> 55'
            },
            # 2D 18 18 05 00 (0C) - 02
            {
                'pattern': [0x2D, 0x18, 0x18, 0x05, 0x00, None],
                'changes': [(5, 0x02)],
                'name': '2D 18 18 05 00 (XX)',
                'description': '2D 18 18 05 00 (0C) -> 02'
            },
            # D4 00 00 0E 2B 5C - –¥–≤–æ–π–Ω–∞—è –∑–∞–º–µ–Ω–∞!
            {
                'pattern': [0xD4, 0x00, 0x00, 0x0E, 0x2B, 0x5C, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None],
                'changes': [(6, 0xAC), (7, 0xA4), (8, 0x90), (18, 0xE8), (19, 0x90), (20, 0xEB)],
                'name': 'D4 00 00 0E 2B 5C (–¥–≤–æ–π–Ω–∞—è –∑–∞–º–µ–Ω–∞)',
                'description': 'D4 00 00 0E 2B 5C -> —Å—Ä–∞–∑—É AC A4 90, —á–µ—Ä–µ–∑ 9 –±–∞–π—Ç E8 90 EB'
            },
            # 00 00 00 00 00 00 00 00 00 00 00 10 00 00 (70) 00 3F 00 - 40
            {
                'pattern': [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, None, 0x00, 0x3F, 0x00],
                'changes': [(14, 0x40)],
                'name': '00 00 00 00 00 00 00 00 00 00 00 10 00 00 (XX) 00 3F 00',
                'description': '00 00 00 00 00 00 00 00 00 00 00 10 00 00 (70) 00 3F 00 -> 40'
            }
        ]
        
        print("=== –ü–æ–∏—Å–∫ –∏ –∑–∞–º–µ–Ω–∞ wildcard-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ ===")
        applied_patterns = 0
        found_addresses = set()  # –í–æ–∑–≤—Ä–∞—â–∞—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º—É –±—É—Ñ–µ—Ä—É
        for i in range(len(buffer)):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            for pattern_info in patterns:
                pattern = pattern_info['pattern']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω
                if i + len(pattern) > len(buffer):
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (None = wildcard, –ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç)
                match = True
                for j in range(len(pattern)):
                    if pattern[j] is not None and buffer[i + j] != pattern[j]:
                        match = False
                        break
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –Ω–∞ –∫–∞–∂–¥–æ–º –∞–¥—Ä–µ—Å–µ
                pattern_key = f"{i}_{pattern_info['name']}"
                
                if match and pattern_key not in found_addresses:
                    # –ù–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    print(f"\n‚úì –ù–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern_info['name']}")
                    print(f"  –ê–¥—Ä–µ—Å: 0x{i:04X}")
                    print(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {pattern_info['description']}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –±–∞–π—Ç—ã (–¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
                    hex_str_before = " ".join([
                        f"({buffer[i+j]:02X})" if pattern[j] is None else f"{buffer[i+j]:02X}"
                        for j in range(len(pattern))
                    ])
                    print(f"  –ë–∞–π—Ç—ã –¥–æ: {hex_str_before}")
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    changes = pattern_info['changes']
                    for pos, new_value in changes:
                        if i + pos < len(buffer):
                            old_value = buffer[i + pos]
                            buffer[i + pos] = new_value
                            print(f"    –ò–∑–º–µ–Ω–µ–Ω –±–∞–π—Ç –≤ –ø–æ–∑–∏—Ü–∏–∏ {pos} (0x{i+pos:04X}): 0x{old_value:02X} -> 0x{new_value:02X}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–π—Ç—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    hex_str_after = " ".join([
                        f"({buffer[i+j]:02X})" if pattern[j] is None else f"{buffer[i+j]:02X}"
                        for j in range(len(pattern))
                    ])
                    print(f"  –ë–∞–π—Ç—ã –ø–æ—Å–ª–µ: {hex_str_after}")
                    
                    found_addresses.add(pattern_key)
                    applied_patterns += 1
                    print(f"  –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {applied_patterns}/{len(patterns)}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if applied_patterns == 0:
            print("\n‚ùå –ù–ò –û–î–ò–ù –ü–ê–¢–¢–ï–†–ù –ù–ï –ù–ê–ô–î–ï–ù!")
        elif applied_patterns < len(patterns):
            print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {applied_patterns}/{len(patterns)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤.")
        else:
            print(f"\nüéØ –£–°–ü–ï–®–ù–û! –ù–∞–π–¥–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤—Å–µ {applied_patterns} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤!")
        
        print(f"\n–ü–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω –∫ wildcard_pattern_encoder")
        print("–í—Å–µ —ç—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")