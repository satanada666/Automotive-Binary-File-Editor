from encoder import Encoder

class sirius_d3_d4_NI(Encoder):
    def __init__(self):
        super().__init__()
        self.size_min = 524288
        self.size_max = 524288
    
    def check(self, buffer: bytearray) -> bool:
        if len(buffer) != self.size_min:
            return False
        return super().check(buffer)
    
    def encode(self, buffer: bytearray):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—É—Ñ–µ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–º–µ—Ä—É
        if not self.check(buffer):
            print(f"–û—à–∏–±–∫–∞: —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ {len(buffer)} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç {self.size_min} –±–∞–π—Ç–∞–º")
            return
        
        # 1) –ó–∞—Ç–∏—Ä–∞–µ–º FF —Å –∞–¥—Ä–µ—Å–∞ 0x4000-0x8000
        print("–®–∞–≥ 1: –ó–∞—Ç–∏—Ä–∞–µ–º –æ–±–ª–∞—Å—Ç—å 0x4000-0x8000 –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ 0xFF")
        for address in range(0x4000, 0x8000):  # –¥–æ 0x8000 –≤–∫–ª—é—á
            if address < len(buffer):
                buffer[address] = 0xFF
        print(f"–û–±–Ω—É–ª–µ–Ω–∞ –æ–±–ª–∞—Å—Ç—å 0x4000-0x8000 ({0x8000 - 0x4000 + 1} –±–∞–π—Ç)")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        variant1_patterns = [
            # –ü–∞—Ç—Ç–µ—Ä–Ω 1: (03) 03 08 C8 C8 - –º–µ–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –±–∞–π—Ç 03 –Ω–∞ FE
            {
                'pattern': [0x03, 0x03, 0x08, 0xC8, 0xC8],
                'changes': [(0, 0xFE)],  # –ø–æ–∑–∏—Ü–∏—è 0, –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ FE
                'name': '03 03 08 C8 C8'
            },
            # –ü–∞—Ç—Ç–µ—Ä–Ω 2: (88) 00 (88) 00 00 01 FF - –º–µ–Ω—è–µ–º 1-–π –∏ 3-–π –±–∞–π—Ç—ã 88 –Ω–∞ 80
            {
                'pattern': [0x88, 0x00, 0x88, 0x00, 0x00, 0x01, 0xFF],
                'changes': [(0, 0x80), (2, 0x80)],  # –ø–æ–∑–∏—Ü–∏–∏ 0 –∏ 2, –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 80
                'name': '88 00 88 00 00 01 FF'
            },
            # –ü–∞—Ç—Ç–µ—Ä–Ω 3: 00 C2 80 00 80 00 86 86 (04) 04 - –º–µ–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–π—Ç 04 –Ω–∞ 00
            {
                'pattern': [0x00, 0xC2, 0x80, 0x00, 0x80, 0x00, 0x86, 0x86, 0x04, 0x04],
                'changes': [(8, 0x00)],  # –ø–æ–∑–∏—Ü–∏—è 8 (–ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π), –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 00
                'name': '00 C2 80 00 80 00 86 86 04 04'
            }
        ]
        
        variant2_patterns = [
            # –ü–∞—Ç—Ç–µ—Ä–Ω 1: (03) 03 08 C8 C8 - –º–µ–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –±–∞–π—Ç 03 –Ω–∞ FE
            {
                'pattern': [0x03, 0x03, 0x08, 0xC8, 0xC8],
                'changes': [(0, 0xFE)],  # –ø–æ–∑–∏—Ü–∏—è 0, –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ FE
                'name': '03 03 08 C8 C8'
            },
            # –ü–∞—Ç—Ç–µ—Ä–Ω 2: 00 (8C) 00 (8C) 00 01 FF - –º–µ–Ω—è–µ–º 2-–π –∏ 4-–π –±–∞–π—Ç—ã 8C –Ω–∞ 80
            {
                'pattern': [0x00, 0x8C, 0x00, 0x8C, 0x00, 0x01, 0xFF],
                'changes': [(1, 0x80), (3, 0x80)],  # –ø–æ–∑–∏—Ü–∏–∏ 1 –∏ 3, –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 80
                'name': '00 8C 00 8C 00 01 FF'
            },
            # –ü–∞—Ç—Ç–µ—Ä–Ω 3: 00 C2 80 00 80 00 86 86 86 (04) 04 - –º–µ–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–π—Ç 04 –Ω–∞ 00
            {
                'pattern': [0x00, 0xC2, 0x80, 0x00, 0x80, 0x00, 0x86, 0x86, 0x86, 0x04, 0x04],
                'changes': [(9, 0x00)],  # –ø–æ–∑–∏—Ü–∏—è 9 (–ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π), –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 00
                'name': '00 C2 80 00 80 00 86 86 86 04 04'
            }
        ]
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        def find_patterns(patterns, variant_name):
            print(f"\n=== –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è {variant_name} ===")
            found_patterns = []
            
            for step, pattern_info in enumerate(patterns, 2):
                print(f"\n–®–∞–≥ {step}: –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {pattern_info['name']}")
                pattern = pattern_info['pattern']
                found_count = 0
                
                for i in range(len(buffer) - len(pattern) + 1):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
                    match = True
                    for j in range(len(pattern)):
                        if buffer[i + j] != pattern[j]:
                            match = False
                            break
                    
                    if match:
                        found_patterns.append((i, pattern_info))
                        print(f"–ù–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å {pattern_info['name']} –ø–æ –∞–¥—Ä–µ—Å—É 0x{i:04X}")
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        hex_str = " ".join([f"{buffer[i+j]:02X}" for j in range(len(pattern))])
                        print(f"–ë–∞–π—Ç—ã: {hex_str}")
                        found_count += 1
                
                if found_count == 0:
                    print(f"–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å {pattern_info['name']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                else:
                    print(f"–ù–∞–π–¥–µ–Ω–æ {found_count} –≤—Ö–æ–∂–¥–µ–Ω–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {pattern_info['name']}")
            
            return found_patterns
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        def apply_changes(found_patterns, variant_name):
            print(f"\n=== –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è {variant_name} ===")
            total_applied = 0
            
            for address, pattern_info in found_patterns:
                changes = pattern_info['changes']
                print(f"\n–ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è {pattern_info['name']} –ø–æ –∞–¥—Ä–µ—Å—É 0x{address:04X}")
                
                for pos, new_value in changes:
                    if address + pos < len(buffer):
                        old_value = buffer[address + pos]
                        buffer[address + pos] = new_value
                        print(f"–ò–∑–º–µ–Ω–µ–Ω –±–∞–π—Ç –≤ –ø–æ–∑–∏—Ü–∏–∏ {pos} (0x{address+pos:04X}): 0x{old_value:02X} -> 0x{new_value:02X}")
                        total_applied += 1
            
            return total_applied
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ –æ–±–æ–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
        all_patterns = [
            # –ò–∑ –≤–∞—Ä–∏–∞–Ω—Ç–∞ 1
            {
                'pattern': [0x03, 0x03, 0x08, 0xC8, 0xC8],
                'changes': [(0, 0xFE)],
                'name': '03 03 08 C8 C8 (–≤–∞—Ä.1)',
                'variant': 1
            },
            {
                'pattern': [0x88, 0x00, 0x88, 0x00, 0x00, 0x01, 0xFF],
                'changes': [(0, 0x80), (2, 0x80)],
                'name': '88 00 88 00 00 01 FF (–≤–∞—Ä.1)',
                'variant': 1
            },
            {
                'pattern': [0x00, 0xC2, 0x80, 0x00, 0x80, 0x00, 0x86, 0x86, 0x04, 0x04],
                'changes': [(8, 0x00)],
                'name': '00 C2 80 00 80 00 86 86 04 04 (–≤–∞—Ä.1)',
                'variant': 1
            },
            # –ò–∑ –≤–∞—Ä–∏–∞–Ω—Ç–∞ 2
            {
                'pattern': [0x03, 0x03, 0x08, 0xC8, 0xC8],
                'changes': [(0, 0xFE)],
                'name': '03 03 08 C8 C8 (–≤–∞—Ä.2)',
                'variant': 2
            },
            {
                'pattern': [0x00, 0x8C, 0x00, 0x8C, 0x00, 0x01, 0xFF],
                'changes': [(1, 0x80), (3, 0x80)],
                'name': '00 8C 00 8C 00 01 FF (–≤–∞—Ä.2)',
                'variant': 2
            },
            {
                'pattern': [0x00, 0xC2, 0x80, 0x00, 0x80, 0x00, 0x86, 0x86, 0x86, 0x04, 0x04],
                'changes': [(9, 0x00)],
                'name': '00 C2 80 00 80 00 86 86 86 04 04 (–≤–∞—Ä.2)',
                'variant': 2
            }
        ]
        
        print("\n=== –ü–æ–∏—Å–∫ –≤—Å–µ—Ö 6 –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ ===")
        applied_patterns = 0
        found_addresses = set()  # –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å –¥–≤–∞–∂–¥—ã –∫ –æ–¥–Ω–æ–º—É –∞–¥—Ä–µ—Å—É
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º—É –±—É—Ñ–µ—Ä—É
        for i in range(len(buffer)):
            if applied_patterns >= 3:
                print("\nüéØ –ù–ê–ô–î–ï–ù–´ –ò –ü–†–ò–ú–ï–ù–ï–ù–´ 3 –ü–ê–¢–¢–ï–†–ù–ê! –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.")
                break
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            for pattern_info in all_patterns:
                pattern = pattern_info['pattern']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω
                if i + len(pattern) > len(buffer):
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
                match = True
                for j in range(len(pattern)):
                    if buffer[i + j] != pattern[j]:
                        match = False
                        break
                
                if match and i not in found_addresses:
                    # –ù–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! –°—Ä–∞–∑—É –ø—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    print(f"\n‚úì –ù–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern_info['name']}")
                    print(f"  –ê–¥—Ä–µ—Å: 0x{i:04X}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –±–∞–π—Ç—ã
                    hex_str = " ".join([f"{buffer[i+j]:02X}" for j in range(len(pattern))])
                    print(f"  –ë–∞–π—Ç—ã: {hex_str}")
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    changes = pattern_info['changes']
                    for pos, new_value in changes:
                        if i + pos < len(buffer):
                            old_value = buffer[i + pos]
                            buffer[i + pos] = new_value
                            print(f"  –ò–∑–º–µ–Ω–µ–Ω –±–∞–π—Ç –≤ –ø–æ–∑–∏—Ü–∏–∏ {pos} (0x{i+pos:04X}): 0x{old_value:02X} -> 0x{new_value:02X}")
                    
                    found_addresses.add(i)
                    applied_patterns += 1
                    print(f"  –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {applied_patterns}/3")
                    
                    if applied_patterns >= 3:
                        break
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if applied_patterns == 0:
            print("\n‚ùå –ù–ò –û–î–ò–ù –ü–ê–¢–¢–ï–†–ù –ù–ï –ù–ê–ô–î–ï–ù!")
        elif applied_patterns < 3:
            print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {applied_patterns}/3 –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º.")
        else:
            print(f"\nüéØ –£–°–ü–ï–®–ù–û! –ù–∞–π–¥–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤—Å–µ 3 –ø–∞—Ç—Ç–µ—Ä–Ω–∞!")
        
        print("\n–ü–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω –∫ sirius_d3_d4_NI")
        print("–í—Å–µ —ç—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")