import os
import sys
import requests
import webbrowser
import subprocess
import tempfile
import logging
from io import StringIO
from datetime import datetime
from PyQt5.QtWidgets import QTextEdit, QVBoxLayout, QWidget, QSplitter, QDialog, QFileDialog, QMessageBox, QGroupBox, QLabel, QInputDialog
from PyQt5.QtCore import QObject, pyqtSignal, QSettings, Qt, QThread
from PyQt5.QtGui import QFont, QPixmap
from PyQt5 import QtWidgets, uic
from packaging import version
from color import setup_color
from file_operations import open_file, save_file
from tree_setup import populate_tree
from ecu_data import create_ecu_hierarchy_from_file
from encoders import get_encoder
from text_highlighting import display_hex_comparison
from file_compare_worker import compare_two_files
from dash_editor import DashEditor
from dialogs import MileageVinPinEditDialog

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('debug.log'),
        logging.StreamHandler()
    ]
)

LOCAL_VERSION = "1.1.56"
GITHUB_VERSION_URL = "https://raw.githubusercontent.com/satanada666/Automotive-Binary-File-Editor/main/version.txt"
DOWNLOAD_URL = "https://github.com/satanada666/Automotive-Binary-File-Editor/releases"
SUPPORT_URL = "https://yoomoney.ru/to/410013340366044/1000"
EXE_NAME = "Black_Box.exe"

def resource_path(relative_path):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ —Ä–µ—Å—É—Ä—Å–∞–º –≤ exe –∏ –æ–±—ã—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ"""
    try:
        base_path = getattr(sys, '_MEIPASS', os.path.abspath(os.path.dirname(__file__)))
        full_path = os.path.join(base_path, relative_path)
        print(f"üîç Resolved path for {relative_path}: {full_path}")
        if os.path.exists(full_path):
            return full_path
        else:
            print(f"‚ö†Ô∏è WARNING: File not found at {full_path}")
            alt_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), relative_path)
            print(f"üîÑ Trying alternative path: {alt_path}")
            return alt_path
    except Exception as e:
        print(f"‚ùå Error resolving resource path for {relative_path}: {str(e)}")
        return os.path.join(os.path.dirname(os.path.abspath(__file__)), relative_path)

# =========================== –ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å ===========================

class ConsoleStream(QObject):
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≤—ã–≤–æ–¥–∞ print() –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –ø–∞–Ω–µ–ª—å"""
    message_written = pyqtSignal(str)
    
    def __init__(self, original_stream=None):
        super().__init__()
        self.original_stream = original_stream
        
    def write(self, message):
        if message.strip():
            timestamp = datetime.now().strftime("%H:%M:%S")
            formatted_message = f"[{timestamp}] {message.strip()}"
            self.message_written.emit(formatted_message)
        if self.original_stream:
            self.original_stream.write(message)
    
    def flush(self):
        if self.original_stream:
            self.original_stream.flush()

class ConsolePanel(QTextEdit):
    """–ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.max_lines = 100
        try:
            self.setup_ui()
            self.add_welcome_message()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ConsolePanel: {e}")
        
    def setup_ui(self):
        self.setReadOnly(True)
        self.setMaximumHeight(150)
        self.setMinimumHeight(150)
        font = QFont("Consolas", 9)
        if not font.exactMatch():
            font = QFont("Courier New", 9)
        self.setFont(font)
        self.setStyleSheet("""
            QTextEdit {
                background-color: #1e1e1e;
                color: #d4d4d4;
                border: 1px solid #3c3c3c;
                border-radius: 4px;
                padding: 4px;
            }
        """)
        
    def add_welcome_message(self):
        try:
            self.append_message("üöÄ Black Box Console –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
    def append_message(self, message):
        try:
            self.append(message)
            document = self.document()
            if document.blockCount() > self.max_lines:
                cursor = self.textCursor()
                cursor.movePosition(cursor.Start)
                cursor.select(cursor.BlockUnderCursor)
                cursor.removeSelectedText()
                cursor.deleteChar()
            scrollbar = self.verticalScrollBar()
            scrollbar.setValue(scrollbar.maximum())
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å: {e}")
    
    def clear_console(self):
        try:
            self.clear()
            self.append_message("üßπ –ö–æ–Ω—Å–æ–ª—å –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Å–æ–ª–∏: {e}")

# =========================== –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∞—Å—Å –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ ===========================

class MainWindow(QtWidgets.QMainWindow):
    def __init__(self, ui_file):
        super().__init__()
        self.console_panel = None
        self.console_stream = None
        try:
            uic.loadUi(ui_file, self)
            print("‚úÖ UI —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ UI: {str(e)}")
            raise
        if hasattr(self, 'progressBar'):
            self.progressBar.setValue(0)
            self.progressBar.setVisible(False)
        try:
            self.setup_console_panel()
            print("‚úÖ –ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏: {str(e)}")
            self.console_panel = None
        if self.console_panel:
            try:
                self.console_stream = ConsoleStream(sys.stdout)
                self.console_stream.message_written.connect(self.console_panel.append_message)
                sys.stdout = self.console_stream
                print("‚úÖ Black Box –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≤—ã–≤–æ–¥–∞: {str(e)}")
    
    def setup_console_panel(self):
        try:
            self.console_panel = ConsolePanel(self)
            central_widget = self.centralWidget()
            if not central_widget:
                print("‚ö†Ô∏è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            current_height = self.height()
            current_width = self.width()
            new_height = current_height + 160
            self.resize(current_width, new_height)
            console_y = current_height - 75
            console_width = current_width - 80
            self.console_panel.setParent(central_widget)
            self.console_panel.setGeometry(40, console_y, console_width, 150)
            self.console_panel.show()
            print("üñ•Ô∏è –ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ setup_console_panel: {str(e)}")
            raise
    
    def log_message(self, message, level="INFO"):
        levels = {
            "INFO": "‚ÑπÔ∏è",
            "WARNING": "‚ö†Ô∏è", 
            "ERROR": "‚ùå",
            "SUCCESS": "‚úÖ",
            "DEBUG": "üêõ"
        }
        icon = levels.get(level, "üìù")
        formatted_message = f"{icon} {message}"
        if hasattr(self, 'console_panel') and self.console_panel:
            try:
                self.console_panel.append_message(formatted_message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –∫–æ–Ω—Å–æ–ª—å: {e}")
                print(formatted_message)
        else:
            print(formatted_message)
    
    def closeEvent(self, event):
        try:
            if hasattr(self, 'console_stream') and self.console_stream and self.console_stream.original_stream:
                sys.stdout = self.console_stream.original_stream
            show_donation_on_close()
            event.accept()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
            event.accept()

# =========================== –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===========================

class UpdaterThread(QThread):
    progress = pyqtSignal(int)
    done = pyqtSignal(str)
    error = pyqtSignal(str)

    def run(self):
        try:
            r = requests.get(GITHUB_VERSION_URL)
            r.raise_for_status()
            new_version = r.text.strip()
            if version.parse(new_version) <= version.parse(LOCAL_VERSION):
                self.done.emit("already_latest")
                return
            desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
            target_dir = os.path.join(desktop_path, "New_version_Black_Box")
            os.makedirs(target_dir, exist_ok=True)
            target_exe = os.path.join(target_dir, EXE_NAME)
            url = f"https://github.com/satanada666/Automotive-Binary-File-Editor/releases/download/v{new_version}/{EXE_NAME}"
            with requests.get(url, stream=True) as r:
                r.raise_for_status()
                total = int(r.headers.get('content-length', 0))
                downloaded = 0
                with open(target_exe, 'wb') as f:
                    for chunk in r.iter_content(chunk_size=8192):
                        if chunk:
                            f.write(chunk)
                            downloaded += len(chunk)
                            if total:
                                percent = int(downloaded * 100 / total)
                                self.progress.emit(percent)
            self.done.emit(target_exe)
        except Exception as e:
            self.error.emit(str(e))

def auto_update_exe(win):
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    win.updater_thread = UpdaterThread()
    thread = win.updater_thread
    bar = win.progressBar
    bar.setVisible(True)
    bar.setValue(0)
    def on_done(path):
        if path == "already_latest":
            print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è")
            QMessageBox.information(win, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è.")
            bar.setVisible(False)
            return
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é...")
        QMessageBox.information(win, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.")
        try:
            folder_path = os.path.dirname(path)
            subprocess.Popen(f'explorer "{folder_path}"')
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {e}")
        try:
            subprocess.Popen([path])
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é: {str(e)}")
            QMessageBox.critical(win, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é: {str(e)}")
        thread.quit()
        thread.wait()
        QtWidgets.QApplication.quit()
    def on_error(msg):
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {msg}")
        QMessageBox.critical(win, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", msg)
        bar.setVisible(False)
    thread.progress.connect(bar.setValue)
    thread.done.connect(on_done)
    thread.error.connect(on_error)
    thread.start()

def check_for_updates(win):
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        response = requests.get(GITHUB_VERSION_URL)
        response.raise_for_status()
        server_version = response.text.strip()
        print(f"üìä –í–µ—Ä—Å–∏–∏: –ª–æ–∫–∞–ª—å–Ω–∞—è={LOCAL_VERSION}, —Å–µ—Ä–≤–µ—Ä={server_version}")
        if version.parse(server_version) > version.parse(LOCAL_VERSION):
            print(f"üéâ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {server_version}")
            reply = QMessageBox.question(
                win, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
                f"–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è {server_version} (—Ç–µ–∫—É—â–∞—è: {LOCAL_VERSION}). –û–±–Ω–æ–≤–∏—Ç—å?",
                QMessageBox.Yes | QMessageBox.No
            )
            if reply == QMessageBox.Yes:
                auto_update_exe(win)
            if hasattr(win, 'actionYes'):
                win.actionYes.setEnabled(True)
        else:
            print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è")
            QMessageBox.information(win, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
                                   f"–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è {LOCAL_VERSION}.")
            if hasattr(win, 'actionYes'):
                win.actionYes.setEnabled(False)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        QMessageBox.critical(win, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        if hasattr(win, 'actionYes'):
            win.actionYes.setEnabled(False)

def download_update(win):
    try:
        print("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–≥—Ä—É–∑–∫–∏...")
        webbrowser.open(DOWNLOAD_URL)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")
        QMessageBox.critical(win, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

def thankyou(win):
    try:
        print("üí∞ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞...")
        reply = QMessageBox.question(
            win, "üí∞ –î–æ–Ω–∞—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ üéÆ",
            "üéØ –≠–π, –∞–≤—Ç–æ–º–µ—Ö–∞–Ω–∏–∫! Black Box —Ä–∞–±–æ—Ç–∞–µ—Ç? üî•\n\n"
            "üçï –ï—Å–ª–∏ –¥–∞, —Ç–æ –º–æ–∂–µ—Ç —É–≥–æ—Å—Ç–∏—à—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–∏—Ü—Ü–µ–π? üòã\n"
            "üíª –ú—ã –ø–∞—à–µ–º –¥–µ–Ω—å –∏ –Ω–æ—á—å, —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å –∫—Ä—É—Ç—ã–µ —Ñ–∏—á–∏! ‚ö°\n\n"
            "ü§ù –õ—é–±–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ = –±–æ–ª—å—à–µ –∫—Ä—É—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π! üìà\n\n"
            "üí∏ –ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ–Ω–∞—Ç—É?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.Yes
        )
        if reply == QMessageBox.Yes:
            webbrowser.open(SUPPORT_URL)
            print(f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {SUPPORT_URL}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {str(e)}")
        QMessageBox.critical(
            win, "–û—à–∏–±–∫–∞", 
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:\n{str(e)}"
        )

def show_donation_on_close():
    try:
        reply = QMessageBox.question(
            None, "üöÄ –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Black Box! üîß",
            "‚≠ê –ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—ã–ª–∞ –ø–æ–ª–µ–∑–Ω–∞? \n\n"
            "üíù –ü–æ–¥–¥–µ—Ä–∂–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–æ–Ω–∞—Ç–æ–º! üéØ\n"
            "üçî –î–∞–∂–µ –Ω–µ–±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏—é –ø—Ä–æ–µ–∫—Ç–∞! üí™\n\n"
            "üî• –ë–æ–ª—å—à–µ –¥–æ–Ω–∞—Ç–æ–≤ = –±–æ–ª—å—à–µ –∫—Ä—É—Ç—ã—Ö —Ñ–∏—á! üöÄ\n\n"
            "üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø—Ä–æ–µ–∫—Ç–∞?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        if reply == QMessageBox.Yes:
            webbrowser.open(SUPPORT_URL)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏")
        else:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –¥–æ–Ω–∞—Ç–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–∫–Ω–∞ –¥–æ–Ω–∞—Ç–∞: {str(e)}")

# =========================== –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===========================

def edit_mileage(win, settings, current_encoder):
    if not settings.contains("file_data") or not settings.contains("last_file"):
        print("‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª")
        QMessageBox.warning(win, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª")
        return
    encoder = current_encoder[0] 
    if encoder is None:
        print("‚ö†Ô∏è –ú–æ–¥—É–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω")
        QMessageBox.warning(win, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                           "–ù–µ –≤—ã–±—Ä–∞–Ω –º–æ–¥—É–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ Module->brand->model")
        return
    if not isinstance(encoder, DashEditor):
        print("‚ö†Ô∏è –¢–µ–∫—É—â–∏–π –º–æ–¥—É–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞")
        QMessageBox.warning(win, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                           "–¢–µ–∫—É—â–∏–π –º–æ–¥—É–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞")
        return
    try:
        print("üîß –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞...")
        file_data = settings.value("file_data")
        current_mileage = settings.value("last_mileage", 0)
        current_vin = settings.value("last_vin", "–Ω–µ –Ω–∞–π–¥–µ–Ω")
        current_pin = settings.value("last_pin", "–Ω–µ –Ω–∞–π–¥–µ–Ω")
        if current_mileage == "N/A":
            current_mileage = 0
        try:
            current_mileage = int(current_mileage)
        except:
            current_mileage = 0
        dialog = MileageVinPinEditDialog(win, current_mileage, current_vin, current_pin)
        if dialog.exec_() == QDialog.Accepted:
            new_mileage = dialog.get_new_mileage()
            new_vin = dialog.get_new_vin()
            new_pin = dialog.get_new_pin()
            print(f"üìù –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: –ø—Ä–æ–±–µ–≥={new_mileage}, VIN={new_vin}, PIN={new_pin}")
            if new_mileage > 65535:
                print(f"‚ö†Ô∏è –ü—Ä–æ–±–µ–≥ {new_mileage} –∫–º –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º 65535 –∫–º")
                QMessageBox.warning(win, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                   f"–ü—Ä–æ–±–µ–≥ {new_mileage} –∫–º –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 65535 –∫–º –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è")
                return
            encoder_name = type(encoder).__name__
            ignore_vin_pin = (
                'dash' in encoder_name.lower() or
                'ecu' in encoder_name.lower() or
                'eeprom' in encoder_name.lower()
            )
            if 'Cruze_BCM_24c16_after_2009' in encoder_name:
                model = 'cruze_2009'
            elif 'Chevrolet_lacetti_2007_2013_dash_denso_93c46' in encoder_name:
                model = 'lacetti_2007'
            elif 'Chevrolet_lacetti_dash_denso' in encoder_name:
                model = 'lacetti_2004'
            elif 'Daewoo_Gentra' in encoder_name:
                model = 'Daewoo_Gentra'
            elif 'gelly_atlas_2020_24c02' in encoder_name:
                model = 'gelly_atlas_2020_24c02'
            elif 'Prado_93c86_until_2015' in encoder_name:
                model = 'Prado_93c86_until_2015'
            elif 'sa3hk_3658100a_ahls' in encoder_name:
                model = 'sa3hk_3658100a_ahls'
            else:
                model = 'default'
            print(f"üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è: –º–æ–¥—É–ª—å={encoder_name}, –º–æ–¥–µ–ª—å={model}")
            if ignore_vin_pin:
                encoder.update_mileage(file_data, new_mileage, model=model)
                updated_data = encoder.data
                if updated_data is None:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–µ–≥ –≤ –º–æ–¥—É–ª–µ {encoder_name}")
                    QMessageBox.critical(win, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–µ–≥: –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã. –ú–æ–¥—É–ª—å: {encoder_name}")
                    return
            else:
                updated_data = encoder.update_mileage(file_data, new_mileage, model=model)
                if updated_data is None:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–µ–≥ –≤ –º–æ–¥—É–ª–µ {encoder_name}")
                    QMessageBox.critical(win, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–µ–≥. –ú–æ–¥—É–ª—å: {encoder_name}")
                    return
                if new_vin and new_vin != current_vin:
                    print(f"üîß –û–±–Ω–æ–≤–ª—è–µ–º VIN: {new_vin}")
                    updated_data = encoder.set_vin(updated_data, new_vin)
                    if updated_data is None:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å VIN –≤ –º–æ–¥—É–ª–µ {encoder_name}")
                        QMessageBox.critical(win, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å VIN. –ú–æ–¥—É–ª—å: {encoder_name}")
                        return
                if new_pin and new_pin != current_pin:
                    print(f"üîß –û–±–Ω–æ–≤–ª—è–µ–º PIN: {new_pin}")
                    updated_data = encoder.set_pin(updated_data, new_pin)
                    if updated_data is None:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å PIN –≤ –º–æ–¥—É–ª–µ {encoder_name}")
                        QMessageBox.critical(win, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å PIN. –ú–æ–¥—É–ª—å: {encoder_name}")
                        return
            file_path = settings.value("last_file")
            with open(file_path, 'wb') as f:
                f.write(updated_data)
            print(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
            settings.setValue("file_data", updated_data)
            updated_result = encoder.encode(updated_data, model=model)
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {updated_result}")
            settings.setValue("last_mileage", updated_result['mileage'])
            settings.setValue("last_vin", updated_result['VIN'] if not ignore_vin_pin else current_vin)
            settings.setValue("last_pin", updated_result['PIN'] if not ignore_vin_pin else current_pin)
            original_data = bytearray(file_data)
            display_hex_comparison(original_data, updated_data, win)
            show_vin_pin_info(win,
                             settings.value("last_vin", "N/A"),
                             settings.value("last_pin", "N/A"),
                             settings.value("last_mileage", "N/A"))
            print(f"üéâ –£—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–±–µ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_mileage} –∫–º")
            QMessageBox.information(win, "–£—Å–ø–µ—à–Ω–æ",
                                   f"–ü—Ä–æ–±–µ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_mileage} –∫–º" +
                                   (f"\nVIN: {new_vin}\nPIN: {new_pin}" if not ignore_vin_pin else ""))
    except Exception as e:
        encoder_name = type(current_encoder[0]).__name__ if current_encoder[0] else "Unknown"
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        QMessageBox.critical(win, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}\n–ú–æ–¥—É–ª—å: {encoder_name}")

def show_vin_pin_info(win, vin, pin, mileage=None):
    try:
        if hasattr(win, 'vinPinContainer'):
            container = win.vinPinContainer
        else:
            raise AttributeError("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 'vinPinContainer' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–æ—Ä–º–µ.")
        if hasattr(win, 'info_panel'):
            win.vin_label.setText(f"VIN: {vin}")
            win.pin_label.setText(f"PIN: {pin}")
            if mileage is not None and hasattr(win, 'mileage_label'):
                win.mileage_label.setText(f"Mileage: {mileage} km")
            win.info_panel.show()
        else:
            info_panel = QGroupBox(container)
            info_panel.setFixedSize(300, 150)
            layout = QVBoxLayout()
            win.vin_label = QLabel(f"VIN: {vin}")
            win.pin_label = QLabel(f"PIN: {pin}")
            if mileage is not None:
                win.mileage_label = QLabel(f"Mileage: {mileage} km")
                layout.addWidget(win.mileage_label)
            layout.addWidget(win.vin_label)
            layout.addWidget(win.pin_label)
            info_panel.setLayout(layout)
            info_panel.setStyleSheet("QGroupBox { border: 0px; margin-top: 0px; }")
            container_layout = container.layout() or QVBoxLayout(container)
            while container_layout.count():
                item = container_layout.takeAt(0)
                if widget := item.widget():
                    widget.deleteLater()
            container_layout.addWidget(info_panel)
            win.info_panel = info_panel
        win.info_panel.show()
        win.update()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_vin_pin_info: {str(e)}")

def show_comparison_results(differences, win, settings):
    result_msg = f"–ù–∞–π–¥–µ–Ω–æ {len(differences)} —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏" if differences else "–§–∞–π–ª—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã, —Ä–∞–∑–ª–∏—á–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {result_msg}")
    win.statusBar().showMessage(result_msg)
    show_vin_pin_info(win,
                     settings.value("last_vin", "N/A"),
                     settings.value("last_pin", "N/A"),
                     settings.value("last_mileage", "N/A"))

def diagnose_ui_components(win):
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    required_components = [
        'centralWidget', 'treeWidget', 'progressBar', 'statusBar',
        'vinPinContainer', 'actionOpen', 'actionSave', 'actionColor',
        'actionCompare', 'actionEditMileage', 'actionCheckUpdate', 'actionThankYou'
    ]
    missing_components = []
    for component in required_components:
        if hasattr(win, component):
            attr = getattr(win, component)
            if attr is not None:
                print(f"  ‚úÖ {component}: –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"  ‚ö†Ô∏è {component}: –Ω–∞–π–¥–µ–Ω, –Ω–æ —Ä–∞–≤–µ–Ω None")
                missing_components.append(component)
        else:
            print(f"  ‚ùå {component}: –ù–ï –ù–ê–ô–î–ï–ù")
            missing_components.append(component)
    if hasattr(win, 'centralWidget') and callable(getattr(win, 'centralWidget')):
        central = win.centralWidget()
        if central:
            print(f"  üìä –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç: {type(central).__name__}")
            print(f"  üìè –†–∞–∑–º–µ—Ä: {central.size().width()}x{central.size().height()}")
            children = central.findChildren(QtWidgets.QWidget)
            print(f"  üë∂ –î–æ—á–µ—Ä–Ω–∏—Ö –≤–∏–¥–∂–µ—Ç–æ–≤: {len(children)}")
            for i, child in enumerate(children[:5]):
                print(f"    - {type(child).__name__}: {child.objectName()}")
        else:
            print("  ‚ùå –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    if missing_components:
        print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(missing_components)}")
        return False
    else:
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
        return True

class ImageViewerDialog(QDialog):
    def __init__(self, image_path, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        self.setMinimumSize(400, 300)
        layout = QVBoxLayout()
        self.image_label = QLabel(self)
        pixmap = QPixmap(image_path)
        if pixmap.isNull():
            self.image_label.setText("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        else:
            scaled_pixmap = pixmap.scaled(800, 600, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            self.image_label.setPixmap(scaled_pixmap)
        layout.addWidget(self.image_label)
        self.setLayout(layout)

def main():
    app = QtWidgets.QApplication([])
    if hasattr(sys, '_MEIPASS'):
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –∏–∑ exe, _MEIPASS: {sys._MEIPASS}")
        try:
            print(f"üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ _MEIPASS: {os.listdir(sys._MEIPASS)}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è _MEIPASS: {e}")
    try:
        ui_file = resource_path("untitled_with_edit_mileage.ui")
        if not os.path.exists(ui_file):
            print(f"‚ùå UI —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {ui_file}")
            QMessageBox.critical(None, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"UI —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {ui_file}")
            sys.exit(1)
        win = MainWindow(ui_file)
        diagnose_ui_components(win)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ UI: {str(e)}")
        QMessageBox.critical(None, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ UI: {str(e)}")
        sys.exit(1)

    tree = win.treeWidget
    settings = QSettings("666", "BLACK_BOX")
    change_color_func = setup_color(win, settings)
    current_encoder = [None]

    def print_tree(item, indent=0):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
        print("  " * indent + f"üå≥ {item.text(0)} (data: {item.data(0, Qt.UserRole)})")
        for i in range(item.childCount()):
            print_tree(item.child(i), indent + 1)

    def on_tree_item_clicked(item, column):
        try:
            selected_items = tree.selectedItems()
            if not selected_items:
                print("‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω –≤ –¥–µ—Ä–µ–≤–µ")
                return
            item = selected_items[0]
            item_name = item.text(0)
            item_data = item.data(0, Qt.UserRole)
            if item_data and item_data.get("type") == "image":
                image_path = resource_path(os.path.join("images", item_data["path"]))
                print(f"üñºÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
                if os.path.exists(image_path):
                    dialog = ImageViewerDialog(image_path, win)
                    dialog.exec_()
                    print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ: {image_path}")
                else:
                    print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
                    QMessageBox.critical(win, "–û—à–∏–±–∫–∞", f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
                return
            ecu_name = item_name
            print(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–Ω–∫–æ–¥–µ—Ä–∞ –¥–ª—è {ecu_name}")
            encoder = None
            try:
                encoder = get_encoder(ecu_name, win)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–Ω–∫–æ–¥–µ—Ä–∞ –¥–ª—è {ecu_name}: {e}")
                QMessageBox.critical(win, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è {ecu_name}: {str(e)}")
                return
            current_encoder[0] = encoder
            if encoder:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —ç–Ω–∫–æ–¥–µ—Ä –¥–ª—è {ecu_name}")
                win.statusBar().showMessage(f"–í—ã–±—Ä–∞–Ω ECU: {ecu_name}, —Ä–µ–¥–∞–∫—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç–Ω–∫–æ–¥–µ—Ä –¥–ª—è {ecu_name}")
                win.statusBar().showMessage(f"–í—ã–±—Ä–∞–Ω ECU: {ecu_name}, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∏–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            try:
                if hasattr(win, 'info_panel'):
                    win.vin_label.setText("VIN: N/A")
                    win.pin_label.setText("PIN: N/A")
                    if hasattr(win, 'mileage_label'):
                        win.mileage_label.setText("Mileage: N/A")
                    win.info_panel.hide()
                settings.setValue("last_vin", "N/A")
                settings.setValue("last_pin", "N/A")
                settings.setValue("last_mileage", "N/A")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏: {e}")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ on_tree_item_clicked: {e}")
            QMessageBox.critical(win, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥—É–ª—è: {str(e)}")

    def clear_console():
        if hasattr(win, 'console_panel') and win.console_panel:
            win.console_panel.clear_console()
            print("üßπ –ö–æ–Ω—Å–æ–ª—å –æ—á–∏—â–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    if hasattr(win, 'console_panel') and win.console_panel:
        win.console_panel.setContextMenuPolicy(Qt.ActionsContextMenu)
        clear_action = QtWidgets.QAction("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å", win.console_panel)
        clear_action.triggered.connect(clear_console)
        win.console_panel.addAction(clear_action)

    def update_progress_wrapper(value):
        if hasattr(win, 'progressBar'):
            win.progressBar.setValue(value)
            win.progressBar.setVisible(value < 100)
        if value % 10 == 0:
            print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {value}%")
    
    win.update_progress = update_progress_wrapper
    win.show_comparison_results = lambda differences: show_comparison_results(differences, win, settings)

    tree.itemClicked.connect(on_tree_item_clicked)
    win.actionOpen.triggered.connect(lambda: (print("üìÇ –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞..."), open_file(win, settings, current_encoder))[1])
    win.actionSave.triggered.connect(lambda: (print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞..."), save_file(win, settings, current_encoder))[1])
    win.actionColor.triggered.connect(lambda: (print("üé® –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã..."), change_color_func())[1])
    win.actionCompare.triggered.connect(lambda: (print("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..."), compare_two_files(win))[1])
    win.actionEditMileage.triggered.connect(lambda: (print("üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞..."), edit_mileage(win, settings, current_encoder))[1])
    win.actionCheckUpdate.triggered.connect(lambda: (print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π..."), check_for_updates(win))[1])
    win.actionThankYou.triggered.connect(lambda: (print("üí∞ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø—Ä–æ–µ–∫—Ç–∞..."), thankyou(win))[1])
    if hasattr(win, 'actionYes'):
        win.actionYes.triggered.connect(lambda: (print("‚¨áÔ∏è –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."), auto_update_exe(win))[1])

    try:
        ecu_file = resource_path("ecu_data.json")
        print(f"üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ECU –∏–∑: {ecu_file}")
        if not os.path.exists(ecu_file):
            print(f"‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö ECU –Ω–µ –Ω–∞–π–¥–µ–Ω: {ecu_file}")
            QMessageBox.critical(win, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö ECU –Ω–µ –Ω–∞–π–¥–µ–Ω: {ecu_file}")
            sys.exit(1)
        import json
        with open(ecu_file, 'r', encoding='utf-8') as f:
            json_content = json.load(f)
        print(f"‚úÖ JSON —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, –∫–ª—é—á–∏: {list(json_content.keys())}")
        ecu_roots = create_ecu_hierarchy_from_file(ecu_file)
        populate_tree(tree, ecu_roots)
        print(f"üå≥ –î–µ—Ä–µ–≤–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {tree.topLevelItemCount()}")
        tree.collapseAll()
        print("üå≥ –í—Å–µ —É–∑–ª—ã –¥–µ—Ä–µ–≤–∞ —Å–≤—ë—Ä–Ω—É—Ç—ã")
        for i in range(tree.topLevelItemCount()):
            print_tree(tree.topLevelItem(i))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏ ECU: {str(e)}")
        QMessageBox.critical(win, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ECU: {str(e)}")
        sys.exit(1)

    try:
        print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
        check_for_updates(win)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
    
    win.show()
    print("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
    if hasattr(win, 'statusBar') and callable(getattr(win, 'statusBar')):
        status_msg = "‚úÖ Black Box –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
        if hasattr(win, 'console_panel') and win.console_panel:
            status_msg += " | –ö–æ–Ω—Å–æ–ª—å: –∞–∫—Ç–∏–≤–Ω–∞"
        else:
            status_msg += " | –ö–æ–Ω—Å–æ–ª—å: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        win.statusBar().showMessage(status_msg)
    
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
#################


#########################################no_console
'''import os
import sys
import requests
import webbrowser
import subprocess
import tempfile
import logging

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('debug.log'),
        logging.StreamHandler()
    ]
)

from PyQt5 import QtWidgets, uic
from PyQt5.QtCore import QSettings, Qt, QThread, pyqtSignal
from PyQt5.QtWidgets import QFileDialog, QMessageBox, QGroupBox, QVBoxLayout, QLabel, QInputDialog, QDialog
from packaging import version
from color import setup_color
from file_operations import open_file, save_file
from tree_setup import populate_tree
from ecu_data import create_ecu_hierarchy_from_file
from encoders import get_encoder
from text_highlighting import display_hex_comparison
from file_compare_worker import compare_two_files
from dash_editor import DashEditor
from dialogs import MileageVinPinEditDialog

LOCAL_VERSION = "1.1.50"
GITHUB_VERSION_URL = "https://raw.githubusercontent.com/satanada666/Automotive-Binary-File-Editor/main/version.txt"
DOWNLOAD_URL = "https://github.com/satanada666/Automotive-Binary-File-Editor/releases"
SUPPORT_URL = "https://yoomoney.ru/to/410013340366044/1000"
EXE_NAME = "Black_Box.exe"

def resource_path(relative_path):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ —Ä–µ—Å—É—Ä—Å–∞–º –≤ exe –∏ –æ–±—ã—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ"""
    try:
        # PyInstaller —Å–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—É—Ç—å –≤ _MEIPASS
        base_path = getattr(sys, '_MEIPASS', os.path.abspath(os.path.dirname(__file__)))
        full_path = os.path.join(base_path, relative_path)
        print(f"Resolved path for {relative_path}: {full_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if os.path.exists(full_path):
            return full_path
        else:
            print(f"WARNING: File not found at {full_path}")
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
            alt_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), relative_path)
            print(f"Trying alternative path: {alt_path}")
            return alt_path
            
    except Exception as e:
        print(f"Error resolving resource path for {relative_path}: {str(e)}")
        return os.path.join(os.path.dirname(os.path.abspath(__file__)), relative_path)

# =========================== –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ===========================

class UpdaterThread(QThread):
    progress = pyqtSignal(int)
    done = pyqtSignal(str)
    error = pyqtSignal(str)

    def run(self):
        try:
            r = requests.get(GITHUB_VERSION_URL)
            r.raise_for_status()
            new_version = r.text.strip()

            if version.parse(new_version) <= version.parse(LOCAL_VERSION):
                self.done.emit("already_latest")
                return

            desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
            target_dir = os.path.join(desktop_path, "New_version_Black_Box")
            os.makedirs(target_dir, exist_ok=True)
            target_exe = os.path.join(target_dir, EXE_NAME)
            url = f"https://github.com/satanada666/Automotive-Binary-File-Editor/releases/download/v{new_version}/{EXE_NAME}"

            with requests.get(url, stream=True) as r:
                r.raise_for_status()
                total = int(r.headers.get('content-length', 0))
                downloaded = 0
                with open(target_exe, 'wb') as f:
                    for chunk in r.iter_content(chunk_size=8192):
                        if chunk:
                            f.write(chunk)
                            downloaded += len(chunk)
                            if total:
                                percent = int(downloaded * 100 / total)
                                self.progress.emit(percent)

            self.done.emit(target_exe)

        except Exception as e:
            self.error.emit(str(e))

def auto_update_exe(win):
    win.updater_thread = UpdaterThread()
    thread = win.updater_thread
    bar = win.progressBar
    bar.setVisible(True)
    bar.setValue(0)

    def on_done(path):
        if path == "already_latest":
            QMessageBox.information(win, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è.")
            bar.setVisible(False)
            return

        QMessageBox.information(win, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.")
        try:
            folder_path = os.path.dirname(path)
            subprocess.Popen(f'explorer "{folder_path}"')
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {e}")

        try:
            subprocess.Popen([path])
        except Exception as e:
            QMessageBox.critical(win, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é: {str(e)}")

        thread.quit()
        thread.wait()
        QtWidgets.QApplication.quit()

    def on_error(msg):
        QMessageBox.critical(win, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", msg)
        bar.setVisible(False)

    thread.progress.connect(bar.setValue)
    thread.done.connect(on_done)
    thread.error.connect(on_error)
    thread.start()

def check_for_updates(win):
    try:
        response = requests.get(GITHUB_VERSION_URL)
        response.raise_for_status()
        server_version = response.text.strip()
        print(f"Checking for updates: local={LOCAL_VERSION}, server={server_version}")

        if version.parse(server_version) > version.parse(LOCAL_VERSION):
            reply = QMessageBox.question(
                win, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
                f"–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è {server_version} (—Ç–µ–∫—É—â–∞—è: {LOCAL_VERSION}). –û–±–Ω–æ–≤–∏—Ç—å?",
                QMessageBox.Yes | QMessageBox.No
            )
            if reply == QMessageBox.Yes:
                auto_update_exe(win)
            if hasattr(win, 'actionYes'):
                win.actionYes.setEnabled(True)
        else:
            QMessageBox.information(win, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
                                   f"–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è {LOCAL_VERSION}.")
            if hasattr(win, 'actionYes'):
                win.actionYes.setEnabled(False)
    except Exception as e:
        QMessageBox.critical(win, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        if hasattr(win, 'actionYes'):
            win.actionYes.setEnabled(False)

def download_update(win):
    try:
        webbrowser.open(DOWNLOAD_URL)
    except Exception as e:
        QMessageBox.critical(win, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

# =========================== –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ===========================

def thankyou(win):
    try:
        reply = QMessageBox.question(
            win, "üí∞ –î–æ–Ω–∞—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ üéÆ",
            "üéØ –≠–π, –∞–≤—Ç–æ–º–µ—Ö–∞–Ω–∏–∫! Black Box —Ä–∞–±–æ—Ç–∞–µ—Ç? üî•\n\n"
            "üçï –ï—Å–ª–∏ –¥–∞, —Ç–æ –º–æ–∂–µ—Ç —É–≥–æ—Å—Ç–∏—à—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–∏—Ü—Ü–µ–π? üòã\n"
            "üíª –ú—ã –ø–∞—à–µ–º –¥–µ–Ω—å –∏ –Ω–æ—á—å, —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å –∫—Ä—É—Ç—ã–µ —Ñ–∏—á–∏! ‚ö°\n\n"
            "ü§ù –õ—é–±–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ = –±–æ–ª—å—à–µ –∫—Ä—É—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π! üìà\n\n"
            "üí∏ –ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ–Ω–∞—Ç—É?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.Yes
        )
        
        if reply == QMessageBox.Yes:
            webbrowser.open(SUPPORT_URL)
            print(f"–û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {SUPPORT_URL}")
            
    except Exception as e:
        QMessageBox.critical(
            win, "–û—à–∏–±–∫–∞", 
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:\n{str(e)}"
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {str(e)}")

def show_donation_on_close():
    try:
        reply = QMessageBox.question(
            None, "üöÄ –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Black Box! üîß",
            "‚≠ê –ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—ã–ª–∞ –ø–æ–ª–µ–∑–Ω–∞? \n\n"
            "üíù –ü–æ–¥–¥–µ—Ä–∂–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–æ–Ω–∞—Ç–æ–º! üéØ\n"
            "üçî –î–∞–∂–µ –Ω–µ–±–æ–ª—å—à–∞—è —Å—É–º–º–∞ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏—é –ø—Ä–æ–µ–∫—Ç–∞! üí™\n\n"
            "üî• –ë–æ–ª—å—à–µ –¥–æ–Ω–∞—Ç–æ–≤ = –±–æ–ª—å—à–µ –∫—Ä—É—Ç—ã—Ö —Ñ–∏—á! üöÄ\n\n"
            "üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø—Ä–æ–µ–∫—Ç–∞?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            webbrowser.open(SUPPORT_URL)
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {SUPPORT_URL}")
        else:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –¥–æ–Ω–∞—Ç–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–∫–Ω–∞ –¥–æ–Ω–∞—Ç–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {str(e)}")

# =========================== –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∞—Å—Å –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ ===========================

class MainWindow(QtWidgets.QMainWindow):
    def __init__(self, ui_file):
        super().__init__()
        uic.loadUi(ui_file, self)
        self.progressBar.setValue(0)
        self.progressBar.setVisible(False)
    
    def closeEvent(self, event):
        try:
            show_donation_on_close()
            event.accept()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
            event.accept()

# =========================== –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===========================

def edit_mileage(win, settings, current_encoder):
    if not settings.contains("file_data") or not settings.contains("last_file"):
        QMessageBox.warning(win, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª")
        return
    
    encoder = current_encoder[0]
    if encoder is None:
        QMessageBox.warning(win, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                           "–ù–µ –≤—ã–±—Ä–∞–Ω –º–æ–¥—É–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ Module->brand->model")
        return
    
    if not isinstance(encoder, DashEditor):
        QMessageBox.warning(win, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                           "–¢–µ–∫—É—â–∏–π –º–æ–¥—É–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞")
        return
    
    try:
        file_data = settings.value("file_data")
        current_mileage = settings.value("last_mileage", 0)
        current_vin = settings.value("last_vin", "–Ω–µ –Ω–∞–π–¥–µ–Ω")
        current_pin = settings.value("last_pin", "–Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if current_mileage == "N/A":
            current_mileage = 0
        try:
            current_mileage = int(current_mileage)
        except:
            current_mileage = 0
        
        dialog = MileageVinPinEditDialog(win, current_mileage, current_vin, current_pin)
        if dialog.exec_() == QDialog.Accepted:
            new_mileage = dialog.get_new_mileage()
            new_vin = dialog.get_new_vin()
            new_pin = dialog.get_new_pin()
            
            print(f"edit_mileage: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª: mileage={new_mileage}, vin={new_vin}, pin={new_pin}")
            
            if new_mileage > 65535:
                QMessageBox.warning(win, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                   f"–ü—Ä–æ–±–µ–≥ {new_mileage} –∫–º –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 65535 –∫–º –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è")
                return
            
            encoder_name = type(encoder).__name__
            ignore_vin_pin = (
                'dash' in encoder_name.lower() or
                'ecu' in encoder_name.lower() or
                'eeprom' in encoder_name.lower()
            )
            
            if 'Cruze_BCM_24c16_after_2009' in encoder_name:
                model = 'cruze_2009'
            elif 'Chevrolet_lacetti_2007_2013_dash_denso_93c46' in encoder_name:
                model = 'lacetti_2007'
            elif 'Chevrolet_lacetti_dash_denso' in encoder_name:
                model = 'lacetti_2004'
            elif 'Daewoo_Gentra' in encoder_name:
                model = 'Daewoo_Gentra'
            elif 'gelly_atlas_2020_24c02' in encoder_name:
                model = 'gelly_atlas_2020_24c02'
            elif 'Prado_93c86_until_2015' in encoder_name:
                model = 'Prado_93c86_until_2015'
            else:
                model = 'default'
            
            print(f"edit_mileage: encoder={encoder_name}, model={model}, new_mileage={new_mileage}, ignore_vin_pin={ignore_vin_pin}")
            
            if ignore_vin_pin:
                encoder.update_mileage(file_data, new_mileage, model=model)
                updated_data = encoder.data
                if updated_data is None:
                    QMessageBox.critical(win, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–µ–≥: –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã. –ú–æ–¥—É–ª—å: {encoder_name}")
                    return
            else:
                updated_data = encoder.update_mileage(file_data, new_mileage, model=model)
                if updated_data is None:
                    QMessageBox.critical(win, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–µ–≥. –ú–æ–¥—É–ª—å: {encoder_name}")
                    return
                
                if new_vin and new_vin != current_vin:
                    updated_data = encoder.set_vin(updated_data, new_vin)
                    if updated_data is None:
                        QMessageBox.critical(win, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å VIN. –ú–æ–¥—É–ª—å: {encoder_name}")
                        return
                
                if new_pin and new_pin != current_pin:
                    updated_data = encoder.set_pin(updated_data, new_pin)
                    if updated_data is None:
                        QMessageBox.critical(win, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å PIN. –ú–æ–¥—É–ª—å: {encoder_name}")
                        return
            
            file_path = settings.value("last_file")
            with open(file_path, 'wb') as f:
                f.write(updated_data)
            print(f"edit_mileage: –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ –ø—É—Ç–∏ {file_path}")
            
            settings.setValue("file_data", updated_data)
            updated_result = encoder.encode(updated_data, model=model)
            print(f"edit_mileage: encode result = {updated_result}")
            settings.setValue("last_mileage", updated_result['mileage'])
            settings.setValue("last_vin", updated_result['VIN'] if not ignore_vin_pin else current_vin)
            settings.setValue("last_pin", updated_result['PIN'] if not ignore_vin_pin else current_pin)
            
            original_data = bytearray(file_data)
            display_hex_comparison(original_data, updated_data, win)
            
            show_vin_pin_info(win,
                             settings.value("last_vin", "N/A"),
                             settings.value("last_pin", "N/A"),
                             settings.value("last_mileage", "N/A"))
            
            QMessageBox.information(win, "–£—Å–ø–µ—à–Ω–æ",
                                   f"–ü—Ä–æ–±–µ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_mileage} –∫–º" +
                                   (f"\nVIN: {new_vin}\nPIN: {new_pin}" if not ignore_vin_pin else ""))
    except Exception as e:
        QMessageBox.critical(win, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}\n–ú–æ–¥—É–ª—å: {encoder_name}")
        print(f"Error editing data: {str(e)}, Encoder: {encoder_name}, Model: {model}")

def show_vin_pin_info(win, vin, pin, mileage=None):
    try:
        if hasattr(win, 'vinPinContainer'):
            container = win.vinPinContainer
        else:
            raise AttributeError("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 'vinPinContainer' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–æ—Ä–º–µ.")
        
        if hasattr(win, 'info_panel'):
            win.vin_label.setText(f"VIN: {vin}")
            win.pin_label.setText(f"PIN: {pin}")
            if mileage is not None and hasattr(win, 'mileage_label'):
                win.mileage_label.setText(f"Mileage: {mileage} km")
            win.info_panel.show()
        else:
            info_panel = QGroupBox(container)
            info_panel.setFixedSize(300, 150)
            layout = QVBoxLayout()
            
            win.vin_label = QLabel(f"VIN: {vin}")
            win.pin_label = QLabel(f"PIN: {pin}")
            if mileage is not None:
                win.mileage_label = QLabel(f"Mileage: {mileage} km")
                layout.addWidget(win.mileage_label)
            
            layout.addWidget(win.vin_label)
            layout.addWidget(win.pin_label)
            
            info_panel.setLayout(layout)
            info_panel.setStyleSheet("QGroupBox { border: 0px; margin-top: 0px; }")
            
            container_layout = container.layout() or QVBoxLayout(container)
            while container_layout.count():
                item = container_layout.takeAt(0)
                if widget := item.widget():
                    widget.deleteLater()
            
            container_layout.addWidget(info_panel)
            win.info_panel = info_panel
        
        win.info_panel.show()
        win.update()
    except Exception as e:
        print(f"Error in show_vin_pin_info: {str(e)}")

def show_comparison_results(differences, win, settings):
    win.statusBar().showMessage(
        f"–ù–∞–π–¥–µ–Ω–æ {len(differences)} —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏" if differences
        else "–§–∞–π–ª—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã, —Ä–∞–∑–ª–∏—á–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    )
    show_vin_pin_info(win,
                     settings.value("last_vin", "N/A"),
                     settings.value("last_pin", "N/A"),
                     settings.value("last_mileage", "N/A"))

def main():
    app = QtWidgets.QApplication([])
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è exe
    if hasattr(sys, '_MEIPASS'):
        print(f"Running from exe, _MEIPASS: {sys._MEIPASS}")
        try:
            print(f"Contents of _MEIPASS: {os.listdir(sys._MEIPASS)}")
        except Exception as e:
            print(f"Error listing _MEIPASS contents: {e}")
    
    try:
        ui_file = resource_path("untitled_with_edit_mileage.ui")
        if not os.path.exists(ui_file):
            print(f"ERROR: UI file not found at {ui_file}")
            QMessageBox.critical(None, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"UI —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {ui_file}")
            sys.exit(1)
        win = MainWindow(ui_file)
    except Exception as e:
        print(f"Error loading UI: {str(e)}")
        QMessageBox.critical(None, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ UI: {str(e)}")
        sys.exit(1)

    tree = win.treeWidget
    settings = QSettings("666", "BLACK_BOX")
    change_color_func = setup_color(win, settings)
    current_encoder = [None]

    def on_tree_item_clicked():
        try:
            selected_items = tree.selectedItems()
            if not selected_items:
                print("on_tree_item_clicked: No items selected")
                return
                
            ecu_name = selected_items[0].text(0)
            print(f"on_tree_item_clicked: Attempting to get encoder for {ecu_name}")
            
            encoder = None
            try:
                # –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º win –∫–∞–∫ parent –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø–∞—Ä–æ–ª—è!
                encoder = get_encoder(ecu_name, win)
            except Exception as e:
                print(f"on_tree_item_clicked: Error getting encoder for {ecu_name}: {e}")
                QMessageBox.critical(win, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è {ecu_name}: {str(e)}")
                return
                
            current_encoder[0] = encoder
            
            if encoder:
                win.statusBar().showMessage(f"–í—ã–±—Ä–∞–Ω ECU: {ecu_name}, —Ä–µ–¥–∞–∫—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                print(f"on_tree_item_clicked: Successfully loaded encoder for {ecu_name}")
            else:
                win.statusBar().showMessage(f"–í—ã–±—Ä–∞–Ω ECU: {ecu_name}, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∏–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                print(f"on_tree_item_clicked: Failed to load encoder for {ecu_name}")
            
            try:
                if hasattr(win, 'info_panel'):
                    win.vin_label.setText("VIN: N/A")
                    win.pin_label.setText("PIN: N/A")
                    if hasattr(win, 'mileage_label'):
                        win.mileage_label.setText("Mileage: N/A")
                    win.info_panel.hide()
                
                settings.setValue("last_vin", "N/A")
                settings.setValue("last_pin", "N/A")
                settings.setValue("last_mileage", "N/A")
            except Exception as e:
                print(f"Error resetting info panel: {e}")
                
        except Exception as e:
            print(f"Critical error in on_tree_item_clicked: {e}")
            QMessageBox.critical(win, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥—É–ª—è: {str(e)}")

    win.update_progress = lambda value: (
        win.progressBar.setValue(value),
        win.progressBar.setVisible(value < 100)
    )[1]
    win.show_comparison_results = lambda differences: show_comparison_results(differences, win, settings)

    tree.itemClicked.connect(on_tree_item_clicked)
    win.actionOpen.triggered.connect(lambda: open_file(win, settings, current_encoder))
    win.actionSave.triggered.connect(lambda: save_file(win, settings, current_encoder))
    win.actionColor.triggered.connect(change_color_func)
    win.actionCompare.triggered.connect(lambda: compare_two_files(win))
    win.actionEditMileage.triggered.connect(lambda: edit_mileage(win, settings, current_encoder))
    win.actionCheckUpdate.triggered.connect(lambda: check_for_updates(win))
    win.actionThankYou.triggered.connect(lambda: thankyou(win))
    if hasattr(win, 'actionYes'):
        win.actionYes.triggered.connect(lambda: auto_update_exe(win))

    try:
        ecu_file = resource_path("ecu_data.json")
        print(f"Loading ECU data from: {ecu_file}")
        
        if not os.path.exists(ecu_file):
            print(f"ERROR: ECU data file not found at {ecu_file}")
            QMessageBox.critical(win, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö ECU –Ω–µ –Ω–∞–π–¥–µ–Ω: {ecu_file}")
            sys.exit(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON —Ñ–∞–π–ª–∞
        try:
            import json
            with open(ecu_file, 'r', encoding='utf-8') as f:
                json_content = json.load(f)
            print(f"JSON loaded successfully, keys: {list(json_content.keys())}")
        except Exception as e:
            print(f"ERROR: Failed to parse JSON: {e}")
            QMessageBox.critical(win, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞: {str(e)}")
            sys.exit(1)
        
        ecu_roots = create_ecu_hierarchy_from_file(ecu_file)
        populate_tree(tree, ecu_roots)
        print(f"Tree populated successfully, item count: {tree.topLevelItemCount()}")
        
    except Exception as e:
        print(f"Error loading ECU hierarchy: {str(e)}")
        QMessageBox.critical(win, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ECU: {str(e)}")
        sys.exit(1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    try:
        check_for_updates(win)
    except Exception as e:
        print(f"Error checking for updates: {e}")
    
    win.show()
    
    print("Application started successfully")
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()'''



