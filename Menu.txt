from PyQt5 import QtWidgets, uic 
from PyQt5.QtCore import QSettings, Qt
from PyQt5.QtWidgets import QFileDialog, QMessageBox, QProgressDialog
from PyQt5.QtWidgets import QLabel, QVBoxLayout, QWidget, QGroupBox
import sys
import os
import requests
import webbrowser
from packaging import version

from color import setup_color 
from file import save_file
from tree_setup import populate_tree
from ecu_data import create_ecu_hierarchy_from_file
from encoder_map import get_encoder_for_ecu
from text_highlighting import display_hex_comparison
from file_compare_worker import compare_two_files

# Локальная версия программы
LOCAL_VERSION = "1.1.0"
GITHUB_VERSION_URL = "https://raw.githubusercontent.com/satanada666/Automotive-Binary-File-Editor/main/version.txt"
DOWNLOAD_URL =   "https://github.com/satanada666/Automotive-Binary-File-Editor/releases"

def resource_path(relative_path):
    try:
        base_path = getattr(sys, '_MEIPASS', None)
        if base_path is None:
            base_path = os.path.abspath(os.path.dirname(__file__))
        return os.path.join(base_path, relative_path)
    except Exception as e:
        print(f"Error resolving resource path for {relative_path}: {str(e)}")
        sys.exit(1)

def open_file(win, settings, current_encoder):
    file_name, _ = QFileDialog.getOpenFileName(
        win, "Открыть файл", "", 
        "Все файлы (*);;Бинарные файлы (*.bin);;Hex файлы (*.hex)"
    )
    if file_name:
        try:
            win.statusBar().showMessage(f"Открытие файла: {file_name}")
            encoder = current_encoder[0]
            if encoder is None:
                QMessageBox.warning(win, "Предупреждение", "Не выбран модуль редактирования.")
                return
            process_file_in_chunks(file_name, encoder, win, settings)
        except Exception as e:
            QMessageBox.critical(win, "Ошибка", f"Не удалось открыть файл: {str(e)}")

def process_file_in_chunks(file_name, encoder, win, settings):
    progress = None
    try:
        file_size = os.path.getsize(file_name)
        if file_size < 2 * 1024 * 1024:
            process_small_file(file_name, encoder, win, settings)
            return

        progress = QProgressDialog("Обработка файла...", "Отмена", 0, 100, win)
        progress.setWindowModality(Qt.WindowModal)
        progress.show()

        with open(file_name, 'rb') as f:
            original_data = bytearray(f.read())

        modified_data = bytearray(original_data)
        if not encoder.check(modified_data):
            progress.close()
            QMessageBox.warning(win, "Ошибка", "Файл не прошел проверку")
            return

        result = encoder.encode(modified_data)
        if isinstance(result, dict):
            settings.setValue("last_vin", result.get("VIN", ""))
            settings.setValue("last_pin", result.get("PIN", ""))

        settings.setValue("file_data", modified_data)
        settings.setValue("last_file", file_name)
        progress.close()
        display_hex_comparison(original_data, modified_data, win)
        QMessageBox.information(win, "Готово", f"Файл {file_name} обработан")

    except Exception as e:
        if progress: progress.close()
        QMessageBox.critical(win, "Ошибка", str(e))

def process_small_file(file_name, encoder, win, settings):
    with open(file_name, 'rb') as f:
        data = bytearray(f.read())

    original_copy = data[:]

    if encoder.check(data):
        result = encoder.encode(data)
        if isinstance(result, dict):
            settings.setValue("last_vin", result.get("VIN", ""))
            settings.setValue("last_pin", result.get("PIN", ""))

        settings.setValue("file_data", data)
        settings.setValue("last_file", file_name)
        display_hex_comparison(original_copy, data, win)
        QMessageBox.information(win, "Готово", f"Файл {file_name} обработан")
    else:
        QMessageBox.warning(win, "Ошибка", "Файл не прошел проверку")

def check_for_updates(win):
    try:
        response = requests.get(GITHUB_VERSION_URL)
        response.raise_for_status()
        server_version = response.text.strip()

        if version.parse(server_version) > version.parse(LOCAL_VERSION):
            reply = QMessageBox.question(
                win, "Обновление", f"Доступна новая версия {server_version}. Обновить?",
                QMessageBox.Ok | QMessageBox.Cancel
            )
            if reply == QMessageBox.Ok:
                webbrowser.open(DOWNLOAD_URL)
    except Exception as e:
        QMessageBox.warning(win, "Ошибка", str(e))

def main():
    app = QtWidgets.QApplication([])

    ui_file = resource_path("untitled.ui")
    win = uic.loadUi(ui_file)
    win.progressBar.setValue(0)
    win.progressBar.setVisible(False)

    tree = win.treeWidget
    settings = QSettings("666", "BLACK_BOX")
    setup_color(win, settings)
    current_encoder = [None]

    def on_tree_item_clicked():
        items = tree.selectedItems()
        if items:
            ecu_name = items[0].text(0)
            encoder = get_encoder_for_ecu(ecu_name)
            current_encoder[0] = encoder
            if encoder:
                win.statusBar().showMessage(f"ECU {ecu_name} выбран")
            else:
                win.statusBar().showMessage(f"Редактор для {ecu_name} не найден")
            if hasattr(win, 'info_panel'):
                win.info_panel.hide()
            settings.setValue("last_vin", "N/A")
            settings.setValue("last_pin", "N/A")

    tree.itemClicked.connect(on_tree_item_clicked)
    win.actionOpen.triggered.connect(lambda: open_file(win, settings, current_encoder))
    win.actionCompare.triggered.connect(lambda: compare_two_files(win, settings))
    win.actionCheckUpdate.triggered.connect(lambda: check_for_updates(win))

    populate_tree(tree, create_ecu_hierarchy_from_file())
    win.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
